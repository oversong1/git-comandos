Iniciar um repositorio

git init -> inicia o Git

git status -> como esta o seu projeto antes do commit e afins,
como se fosse uma especie de preparo.

git add -> estamos adicionando ao repositorio um arquivo, se o arquivo ja existe quer dizer que vamos adicionar um arquivo ou arquivos para subir o add funciona como uma preparação antes do comando git commit.

exemplo 01
git add <nome do arquivo> -> estamos mandando um arquivo especifico para o nosso repositorio

exemplo 02
git add . -> usando o comando com um "ponto" vamos mandar tudo que tivermos no projeto para o repositorio.

git commit -> E finalmente o commit, esse comando é usado depois de fazermos o comando git add. O comando COMMIT é o responsavel de subir para o repositorio o arquivo ou a modificação que fizemos em algo do projeto.

exemplo 01
git commit -m "uma anotação do que vc esta subindo";
obs: o -m dentro do commit é para passar a mensagem entre parenteses

 git log -> esse comando serve para que você possa ver o historico de commits que foram realizados

 exemplo 01
 git log
 exemplo 02 -> forma condensada
 git log --online

git checkout <codigo do git log> -> esse comando usamos junto com um código, o git checkout é usado para voltar ao estado de um commit que fizemos anteriormente.
exemplo01
git checkout 9d82dfc
obs: perceba que depois do chekout tem um código, esse código nó obtemos atraves do git log, pois no git log conseguimos ver todo historico de commits ja feito e quando queremos que nosso projeto volte a um estado de um commit, usamos o git chekout com o código do commit desejado.

exemplo02
git checkout master
obs: esse comando checkout com o master é usado quando usamos o git checkout <código> e agora queremos voltar o projeto para a versão que estava mais atual.

exemplo 03
git checkout -b arquivos
OBS: o comando checkout tem uma função de mudar de branch, no entando com o a tag -b <nome do branch>, você consegue não só mudar o branch mais sim criar e entrar no branch com um unico comando.

git reverse <código> -> esse código funciona quase igual o checkout  
exemplo 01
git reverse 9d82dfc

git reset <código> -> esse código funciona quase igual o checkout  
exemplo 01
git reset 9d82dfc
obs: vai resetar os commits até o ponto do código que você passou, no entando ainda se pode comparar o antigo com os futuros commits

exemplo 02
git reset 9d82dfc --hard
obs: ja esse comando com o a flag --hard, faz com que tudo seja resetado de vez até aquele commits do código passado.

OBS é um arquivo criado chamado .gitignore
o arquivo ".gitignore" serve para que possamos colocar ou descrever arquivos que devem ser ignorados pelo git ou github. Pois certos arquivos de configuração não devem estar acessivel ao publico que contenha dados pessoas ou criticos