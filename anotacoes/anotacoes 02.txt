git branch -> esse comando serve para ver em qual ramificaçao 
estamos trabalhando uma vez que podemos no mesmo projeto ter 
ramificaçãoes para trabalhar e depois que criamos algo novo e testarmos
jogamos para o BRANCH MASTER para agrupar a nova fiture

exemplo 01
git branch
OBS: esse comando sozinho verica em qual branch estamos

exemplo02
git branch teste 
OBS: esse comando CRIA UMA REMIFICAÇÃO NOVA COM O NOME "TESTE"

exemplo 03
git checkout teste
OBS: para trocarmos de branch vamos ter a ajuda de outro comando o 
git checkout <nome da branch>, pois o checkout ele checa os commits volta desfaz e reversa e alem disso tudo ele é quem faz a mudança dos branchs.

exemplo 04
git branch -d <nome do branch> = com o (d = minusculo) tenta apagar depois do merge

git branch -D <nome do branch> = com o(D = maiusculo) apaga mesmo sem o merge

OBS: com ese comando estamos deletando o nosso branch

git merge -> o comando merger serve para que possamo juntas branhs diferentes em um só, o que na verdade acontece é que vamos verificar oq tem um branch e verificar oque tem em outro branch, e fundir.
No caso a fusão se da fazendo que os arquivos que nao tem em um branch va para o outro

exemplo 01 -> vamo deixar ativo o branch master ou main, com o comando 
git checkout master ou main, depois vamos dar um merge desse branch MASTER com outro que vamos escolher

git merge <nome do branch>
OBS: feito isso ele vai pegar os arquivos do branch que escolhemos no merge e comparar ele com os arquivos do branch MASTER, e todo arquivo que o branch que escolhemos no merge tiver e NÃO TIVER NO BRANCH MASTER, vai ser trazido e assim faz a fusão.

Resolvendo conflitos 

Quando damos um MERGE de um branch para outro se existir linhas com parametros ou informações conflitantes para a mesma coisa, o git vai para o merge e vai apontar no seu codigo onde esta o conflito para que possamos resolver, comentarios mostrando onde demove deixar ou apagar o conflito após apagar ou resolver o conflito de arquivos e codigo, podemos fazer o commit

exemplo 01

body{
<<<<<<< HEAD
    background-color: #f60;
=======
    background-color: #000;
>>>>>>> whatsapp
}


Usando o repositorio Github
tudo que utilizamos na construção do git até agora era pra ter localmente os arquivos e projetos, ja com a plataforma GITHUB, podemos deixar tudo online para ser acessado.

Ao construir tudo que precisamos no git, vamos enviar para o github, primeiro na internet na plataformado github vamos criar um repositorio e ao criar teremos um link para usar no nosso terminal.

e para enviar os arquivos ou o projeto da nossa maquina para a internet usamos o comando GIT PUSH.

ou seja vamos enviar os arquivos, primeiro e mais importante temos que ter o terminal aberto dentro da pasta que vamos enviar o projeto, ou o terminal seja qual for PowerShel, Prompt, gitBash, o importanto é que esse terminal esteja com o caminho dentro da pasta dos arquivos 

e sendo assim damos o comando git push, e isso vai fazer com que o git peça via terminal o seu acesso seja email e senha para confirmar o usuario, uma vez confirmado vc fica logado e pode enviar quantas vezes precisar os arquivos para o GITHUB.